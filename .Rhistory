# Adding a "bye" team if the number of teams is not a power of two
if (nrow(teams_seeded) %% 2 != 0) {
teams_seeded <- rbind(teams_seeded, data.frame(TEAM = "Bye", score = 0, seed = nrow(teams_seeded) + 1))
}
# Creating the bracket data
round_1 <- data.frame(
round = 1,
match = 1:(nrow(teams_seeded)%%32),
team1 = teams_seeded$TEAM[1:(nrow(teams_seeded)%%32)],
team2 = teams_seeded$TEAM[((nrow(teams_seeded)%%32) + 1):nrow(teams_seeded)]
)
round_2 <- data.frame(
round = 2,
match = 1:(nrow(round_1)/2),
team1 = ifelse(round_1$match %% 2 == 1, round_1$team1, round_1$team2),
team2 = ifelse(round_1$match %% 2 == 1, round_1$team2, round_1$team1)
)
round_3 <- data.frame(
round = 3,
match = 1:(nrow(round_2)/2),
team1 = ifelse(round_2$match %% 2 == 1, round_2$team1, round_2$team2),
team2 = ifelse(round_2$match %% 2 == 1, round_2$team2, round_2$team1)
)
round_4 <- data.frame(
round = 4,
match = 1:(nrow(round_3)/2),
team1 = ifelse(round_3$match %% 2 == 1, round_3$team1, round_3$team2),
team2 = ifelse(round_3$match %% 2 == 1, round_3$team2, round_3$team1)
)
round_5 <- data.frame(
round = 5,
match = 1:(nrow(round_4)/2),
team1 = ifelse(round_4$match %% 2 == 1, round_4$team1, round_4$team2),
team2 = ifelse(round_4$match %% 2 == 1, round_4$team2, round_4$team1)
)
championship <- data.frame(
round = 6,
match = 1,
team1 = ifelse(round_5$match %% 2 == 1, round_5$team1, round_5$team2),
team2 = ifelse(round_5$match %% 2 == 1, round_5$team2, round_5$team1)
)
# Combine all the rounds into one dataframe
bracket_data <- bind_rows(round_1, round_2, round_3, round_4, round_5, championship)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
if (nrow(results) == 0) {
return(NULL) # return NULL if no rows match the filtering criteria
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
print(max(bracket_data$round))
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
# Create a dataframe with team names and scores
teams <- read.csv('tournament_data.csv') %>%
select(TEAM, KENPOM.ADJUSTED.EFFICIENCY,
BARTTORVIK.ADJUSTED.EFFICIENCY,
TURNOVER..,POINTS.PER.POSSESSION.DEFENSE, FREE.THROW..) %>%
distinct(TEAM, .keep_all = TRUE)
teams$score <- teams$KENPOM.ADJUSTED.EFFICIENCY *
teams$BARTTORVIK.ADJUSTED.EFFICIENCY *
teams$TURNOVER.. / teams$POINTS.PER.POSSESSION.DEFENSE * teams$FREE.THROW..
teams <- teams %>%
mutate(score = round(score,4))
# Seeding the teams based on their scores
teams_seeded <- teams %>%
arrange(desc(score)) %>%
mutate(seed = row_number())
# Adding a "bye" team if the number of teams is not a power of two
if (nrow(teams_seeded) %% 2 != 0) {
teams_seeded <- rbind(teams_seeded, data.frame(TEAM = "Bye", score = 0, seed = nrow(teams_seeded) + 1))
}
# Creating the bracket data
round_1 <- data.frame(
round = 1,
match = 1:(nrow(teams_seeded)%%32),
team1 = teams_seeded$TEAM[1:(nrow(teams_seeded)%%32)],
team2 = teams_seeded$TEAM[((nrow(teams_seeded)%%32) + 1):nrow(teams_seeded)]
)
round_2 <- data.frame(
round = 2,
match = 1:(nrow(round_1)/2),
team1 = ifelse(round_1$match %% 2 == 1, round_1$team1, round_1$team2),
team2 = ifelse(round_1$match %% 2 == 1, round_1$team2, round_1$team1)
)
round_3 <- data.frame(
round = 3,
match = 1:(nrow(round_2)/2),
team1 = ifelse(round_2$match %% 2 == 1, round_2$team1, round_2$team2),
team2 = ifelse(round_2$match %% 2 == 1, round_2$team2, round_2$team1)
)
round_4 <- data.frame(
round = 4,
match = 1:(nrow(round_3)/2),
team1 = ifelse(round_3$match %% 2 == 1, round_3$team1, round_3$team2),
team2 = ifelse(round_3$match %% 2 == 1, round_3$team2, round_3$team1)
)
round_5 <- data.frame(
round = 5,
match = 1:(nrow(round_4)/2),
team1 = ifelse(round_4$match %% 2 == 1, round_4$team1, round_4$team2),
team2 = ifelse(round_4$match %% 2 == 1, round_4$team2, round_4$team1)
)
championship <- data.frame(
round = 6,
match = 1,
team1 = ifelse(round_5$match %% 2 == 1, round_5$team1, round_5$team2),
team2 = ifelse(round_5$match %% 2 == 1, round_5$team2, round_5$team1)
)
# Combine all the rounds into one dataframe
bracket_data <- bind_rows(round_1, round_2, round_3, round_4, round_5, championship)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
if (nrow(results) == 0) {
return(NULL) # return NULL if no rows match the filtering criteria
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
print(max(bracket_data$round))
ui <- fluidPage(
titlePanel("Tournament Results"),
sidebarLayout(
sidebarPanel(),
mainPanel(
tableOutput("results_table")
)
)
)
server <- function(input, output) {
output$results_table <- renderTable({
table_results(bracket_data)
})
}
shinyApp(ui, server)
View(bracket_data)
View(championship)
View(bracket_data)
library(tidyverse)
library(leaflet)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyverse)
library(leaflet)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyverse)
library(leaflet)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyverse)
library(leaflet)
library(dplyr)
library(lubridate)
library(ggplot2)
rm(list = ls())
setwd("C:/Users/Eirik/OneDrive/College/Senior/Data 332/uber")
apr <- read.csv('uber-raw-data-apr14.csv')
may <- read.csv('uber-raw-data-may14.csv')
jun <- read.csv('uber-raw-data-jun14.csv')
jul <- read.csv('uber-raw-data-jul14.csv')
aug <- read.csv('uber-raw-data-aug14.csv')
sep <- read.csv('uber-raw-data-sep14.csv')
# Bind data
df <- bind_rows(apr, may, jun, jul, aug, sep)
#clean and standardize datetime values
df$Date.Time <- ifelse(grepl("/", df$Date.Time),
format(strptime(df$Date.Time, format = "%m/%d/%Y %H:%M:%S"), "%Y-%m-%d %H:%M:%S"),
df$Date.Time)
#convert char to date and time column
df$Date.Time <- parse_date_time(df$Date.Time, orders = c("ymd HMS", "mdy HMS"), tz = "UTC")
# Create hour column
df$hour <- hour(df$Date.Time)
df$month <- month(df$Date.Time)
## Pivot table of trips by the hour
hourly_counts <- df %>%
group_by(hour) %>%
summarise(count = n())
## Chart of trips by hour and month
#group and count instances by month and hour
monthly_hourly_counts <- df %>%
group_by(month, hour) %>%
summarise(count = n())
#convert month and hour to factors for proper ordering in the chart
monthly_hourly_counts$month <- factor(monthly_hourly_counts$month, labels = month.abb)
#convert month and hour to factors for proper ordering in the chart
monthly_hourly_counts$month <- factor(monthly_hourly_counts$month)
monthly_hourly_counts$hour <- factor(monthly_hourly_counts$hour)
#create a bar chart of instances by month and hour
ggplot(monthly_hourly_counts, aes(x = month, y = count, fill = hour)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Month", y = "Count", fill = "Hour") +
ggtitle("Instances by Month and Hour") +
theme_minimal()
## Chart of trips every hour
ggplot(monthly_hourly_counts, aes(x = hour, y = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light()
## Chart of trips every hour
ggplot(monthly_hourly_counts, aes(x = hour, y = count)) +
geom_line(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light()
## Chart of trips every hour
ggplot(monthly_hourly_counts, aes(x = hour, y = count)) +
geom_abline(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light()
## Chart of trips every hour
ggplot(monthly_hourly_counts, aes(x = hour, y = count)) +
geom_count(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light()
## Chart of trips every hour
ggplot(monthly_hourly_counts, aes(x = hour, y = count)) +
geom_smooth(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light()
## Chart of trips every hour
ggplot(monthly_hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light()
## Chart of trips every hour
ggplot(monthly_hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_linedraw()
## Chart of trips every hour
ggplot(monthly_hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_classic()
## Chart of trips every hour
ggplot(monthly_hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light()
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light()
## Chart of trips every hour
ggplot(monthly_hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light()
View(hourly_counts)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light()
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(breaks = seq(min(x), max(x), by = 1))
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(breaks = seq(min(x), max(x), by = 1))
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(breaks = seq(min(hour), max(hour), by = 1))
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(breaks = seq(min('hour'), max('hour'), by = 1))
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(breaks = 0)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(breaks = 24)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(breaks = 1)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 1)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 24)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 22)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 20)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 14)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 16)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 18)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 19)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_histogram(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 19)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 19)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 19) +
scale_y_continuous(n.breaks = 8)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7, legend = FALSE) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 19) +
scale_y_continuous(n.breaks = 8)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count, legend = FALSE)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 19) +
scale_y_continuous(n.breaks = 8)
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 19) +
scale_y_continuous(n.breaks = 8)
## Plot data of trips taken during every day of month
df$day <- weekdays(df$Date.Time)
View(df)
# Bind data
df <- bind_rows(apr, may, jun, jul, aug, sep)
#clean and standardize datetime values
df$Date.Time <- ifelse(grepl("/", df$Date.Time),
format(strptime(df$Date.Time, format = "%m/%d/%Y %H:%M:%S"), "%Y-%m-%d %H:%M:%S"),
df$Date.Time)
#convert char to date and time column
df$Date.Time <- parse_date_time(df$Date.Time, orders = c("ymd HMS", "mdy HMS"), tz = "UTC")
# Create hour column
df$hour <- hour(df$Date.Time)
df$month <- month(df$Date.Time)
df$day <- weekdays(df$Date.Time)
## Pivot table of trips by the hour
hourly_counts <- df %>%
group_by(hour) %>%
summarise(count = n())
## Chart of trips by hour and month
#group and count instances by month and hour
monthly_hourly_counts <- df %>%
group_by(month, hour) %>%
summarise(count = n())
#convert month and hour to factors for proper ordering in the chart
monthly_hourly_counts$month <- factor(monthly_hourly_counts$month)
monthly_hourly_counts$hour <- factor(monthly_hourly_counts$hour)
#create a bar chart of instances by month and hour
ggplot(monthly_hourly_counts, aes(x = month, y = count, fill = hour)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Month", y = "Count", fill = "Hour") +
ggtitle("Instances by Month and Hour") +
theme_minimal()
## Chart of trips every hour
ggplot(hourly_counts, aes(x = hour, y = count, fill = count)) +
geom_col(position = "dodge", width = 0.7) +
labs(x = "Hour", y = "Count") +
ggtitle("Instances by Hour") +
theme_light() +
scale_x_continuous(n.breaks = 19) +
scale_y_continuous(n.breaks = 8)
View(df)
